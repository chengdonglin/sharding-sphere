# shardingjdbc分片策略 # 配置数据源，给数据源起名称
spring.shardingsphere.datasource.names=m1
# 一个实体类对应两张表，覆盖
spring.main.allow-bean-definition-overriding=true
#配置数据源具体内容，包含连接池，驱动，地址，用户名和密码
spring.shardingsphere.datasource.m1.type=com.alibaba.druid.pool.DruidDataSource
spring.shardingsphere.datasource.m1.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.m1.url=jdbc:mysql://localhost:3306/order_db?serverTimezone=GMT%2B8
spring.shardingsphere.datasource.m1.username=root
spring.shardingsphere.datasource.m1.password=123456


#指定order表分布情况，配置表在哪个数据库里面，表名称都是什么 m1.order_1 , m1.order_2
spring.shardingsphere.sharding.tables.order.actual-data-nodes=m1.order_$->{1..2}

# 指定order表里面主键cid 生成策略 SNOWFLAKE
spring.shardingsphere.sharding.tables.order.key-generator.column=order_id
spring.shardingsphere.sharding.tables.order.key-generator.type=SNOWFLAKE


# 指定分片策略 约定order值偶数添加到order_1表，如果order_id是奇数添加到order_2表
spring.shardingsphere.sharding.tables.order.table-strategy.inline.sharding-column=order_id
spring.shardingsphere.sharding.tables.order.table-strategy.inline.algorithm-expression=order_$->{order_id % 2 + 1}


# 打开sql输出日志
spring.shardingsphere.props.sql.show=true

mybatis-plus.configuration.map-underscore-to-camel-case=true